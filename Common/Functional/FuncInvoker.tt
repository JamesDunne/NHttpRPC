<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".generated.cs" #><#
    // Max number of parameters:
    const int max = 8;
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace System
{
<#
// NOTE(jsd): This is for pre-.NET 4.0
#if false
	for (int n = 5; n <= max; ++n)
    {
#>
    public delegate TResult Func<<#= Tlist(n) #>, TResult>(<#= Targlist(n) #>);
<#  }
#endif
#>

<#  for (int n = 1; n <= max; ++n)
    {
#>
    /// <summary>
    /// Invokes the function with the set of parameter values in various ways.
    /// </summary>
<#      for (int i = 1; i <= n; ++i)
        {
#>
    /// <typeparam name="T<#= i #>"></typeparam>
<#      }
#>
    /// <typeparam name="TResult"></typeparam>
    public struct FuncInvoker<<#= Tlist(n) #>, TResult>
    {
        private readonly Func<<#= Tlist(n) #>, TResult> _func;

        /// <summary>
        /// Creates a function invoker to invoke functions with parameters in various ways.
        /// </summary>
        public FuncInvoker(Func<<#= Tlist(n) #>, TResult> func)
        {
            if (func == null) throw new ArgumentNullException("func");

            this._func = func;
        }

        /// <summary>
        /// Invokes the function with the parameter values.
        /// </summary>
<#      for (int i = 1; i <= n; ++i)
        {
#>
        /// <param name="t<#= i #>"></param>
<#      }
#>
        /// <returns></returns>
        public TResult Invoke(<#= Targlist(n) #>)
        {
            TResult val;
            val = _func(<#= Texplist(n) #>);
            return val;
        }

        /// <summary>
        /// Invokes the function with the parameter values.
        /// </summary>
<#      for (int i = 1; i <= n; ++i)
        {
#>
        /// <param name="t<#= i #>"></param>
<#      }
#>
        /// <returns></returns>
        public TResult this[<#= Targlist(n) #>]
        {
            get
            {
                return Invoke(<#= Texplist(n) #>);
            }
        }
    }

<#  }
#>
    public static partial class Function
    {
<#  for (int n = 1; n <= max; ++n)
    {
#>
		/// <summary>
		/// Makes a FuncInvoker out of the given Func.
		/// </summary>
        /// <param name="func"></param>
        public static FuncInvoker<<#= Tlist(n) #>, TResult> MakeInvoker<<#= Tlist(n) #>, TResult>(Func<<#= Tlist(n) #>, TResult> func)
        {
            return new FuncInvoker<<#= Tlist(n) #>, TResult>(func);
        }

<#  }
#>
    }
}<#+
    // helper methods

    static string Tlist(int n, string format)
    {
        return String.Join(", ", Enumerable.Range(1, n).Select(i => String.Format(format, i)));
    }

    static string Tlist(int n)
    {
        return Tlist(n, "T{0}");
    }

    static string Targlist(int n)
    {
        return Tlist(n, "T{0} t{0}");
    }

    static string Texplist(int n)
    {
        return Tlist(n, "t{0}");
    }
#>